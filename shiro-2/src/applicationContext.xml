<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
    <!-- 在Spring的配置文件中配置shiro -->

    <!-- =========================================================
         Shiro Core Components - Not Spring Specific
         ========================================================= -->
    <!-- Shiro's main business-tier object for web-enabled applications
         (use DefaultSecurityManager instead when there is no web environment)-->
         
    <!-- 1.配置securityManager -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="cacheManager" ref="cacheManager"/>
        <property name="authenticator" ref="authenticator"></property>
        <property name="realms">
             <list>
                  <ref bean="jdbcRealm"/>
                  <ref bean="secondRealm"/>
             </list>
        </property>
        <!-- 设置记住我功能的记住时长，超时记住我功能就会失效,value的单位是秒 -->
        <property name="rememberMeManager.cookie.maxAge" value="15"></property>
    </bean>

    <!-- Let's use some enterprise caching support for better performance.  You can replace this with any enterprise
         caching framework implementation that you like (Terracotta+Ehcache, Coherence, GigaSpaces, etc -->
         
    <!-- 2.配置cacheManager 
         2.1需要加入ehcache的jar包及配置文件
    -->     
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <!-- Set a net.sf.ehcache.CacheManager instance here if you already have one.  If not, a new one
             will be creaed with a default config:
             <property name="cacheManager" ref="ehCacheManager"/> -->
        <!-- If you don't have a pre-built net.sf.ehcache.CacheManager instance to inject, but you want
             a specific Ehcache configuration to be used, specify that here.  If you don't, a default
             will be used.:    -->
        <property name="cacheManagerConfigFile" value="classpath:ehcache.xml"/>
    </bean>

    <bean id="authenticator" class="org.apache.shiro.authc.pam.ModularRealmAuthenticator">
         <!-- 指定认证策略为必须所有Realm认证通过才行，默认是只要有一个通过即可 -->
         <property name="authenticationStrategy">
              <bean class="org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy"></bean>
         </property>
    </bean>
    <!-- Used by the SecurityManager to access security data (users, roles, etc).
         Many other realm implementations can be used too (PropertiesRealm,
         LdapRealm, etc. -->
    <!-- 
      3.配置Realm
      3.1直接配置实现了org.apache.shiro.realm.Realm接口的bean
    -->
    <bean id="jdbcRealm" class="com.atguigu.shiro.realms.ShiroRealm">
         <!-- 配置了这个匹配器之后，shiro会自动的把前台传过来的密码转换为MD5密文 -->
         <property name="credentialsMatcher">
             <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
                 <property name="hashAlgorithmName" value="MD5"></property>
                 <!-- 指定加密的次数 -->
                 <property name="hashIterations" value="1024"></property>
             </bean>
         </property>
    </bean>
    
    <bean id="secondRealm" class="com.atguigu.shiro.realms.SecondRealm">
         <property name="credentialsMatcher">
             <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
                 <property name="hashAlgorithmName" value="SHA1"></property>
                 <!-- 指定加密的次数 -->
                 <property name="hashIterations" value="1024"></property>
             </bean>
         </property>
    </bean>

    <!-- =========================================================
         Shiro Spring-specific integration
         ========================================================= -->
    <!-- Post processor that automatically invokes init() and destroy() methods
         for Spring-configured Shiro objects so you don't have to
         1) specify an init-method and destroy-method attributes for every bean
            definition and
         2) even know which Shiro objects require these methods to be
            called. -->
    <!-- 
      4.配置LifecycleBeanPostProcessor可以自动的来调用配置在Spring IOC容器中shiro bean的生命周期方法 
    -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <!-- Enable Shiro Annotations for Spring-configured beans.  Only run after
         the lifecycleBeanProcessor has run: -->
    <!-- 
      5.启用IOC 容器中使用shiro的注解。但必须在配置了LifecycleBeanPostProcessor之后才可以使用
     -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor"/>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

    <!-- Define the Shiro Filter here (as a FactoryBean) instead of directly in web.xml -
         web.xml uses the DelegatingFilterProxy to access this bean.  This allows us
         to wire things with more control as well utilize nice Spring things such as
         PropertiesPlaceholderConfigurer and abstract beans or anything else we might need: -->
         
    <!-- 
       6.配置ShiroFilter
       6.1 默认id必须和web.xml文件中配置的DelegatingFilterProxy的<filter-name>一致。
       6.2 如果不一致，则会抛出NoSuchBeanDefinitionException异常，因为shiro会来IOC容器中查找
              和<filter-name>名字对应的filter bean
     -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <property name="loginUrl" value="/login.jsp"/>
        <property name="successUrl" value="/list.jsp"/>
        <property name="unauthorizedUrl" value="/unauthorized.jsp"/>
        
        <!--在下面的这个被注释掉的配置<property name="filterChainDefinitions">里面
                 说到底配置完都会构成一个Map封装在filterChainDefinitionMap中，所以可以抽取出权限控制（当很复杂的时候）
                 存放到数据库而不用一个个的去配置
          -->
        <property name="filterChainDefinitionMap" ref="filterChainDefinitionMap"></property>
        
        <!-- 
                       配置哪些页面需要受保护
                       以及访问这些页面需要的权限
           1. anon表示可以被匿名访问
           2. authc表示必须认证，即登录才可以访问的页面
           3.logout登出。
           4.roles角色过滤器
        -->
        
        <!--  
        <property name="filterChainDefinitions">
            <value>
                /login.jsp = anon
                /shiro/login = anon
                /shiro/logout = logout
                
                /user.jsp = roles[user]
                /admin.jsp = roles[admin]
                
                # everything else requires authentication:
                /** = authc
            </value>
        </property>
        -->
    </bean>
    
    <!-- 配置一个bean,该bean实际上是一个Map,通过实例工厂方法的方式 -->
    <bean id="filterChainDefinitionMap" factory-bean="filterChainDefinitionMapBuilder" 
    factory-method="buildfilterChainDefinitionMap"></bean>
    <bean id="filterChainDefinitionMapBuilder" 
    class="com.atguigu.shiro.factory.FilterChainDefinitionMapBuilder"></bean>
    
    <!-- 注册Service进Spring IOC容器 -->
    <bean id="shiroService" class="com.atguigu.shiro.services.ShiroService"></bean>
</beans>
